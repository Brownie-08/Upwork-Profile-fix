"""
Django settings for lusitohub project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
import environ
import dj_database_url


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize django-environ
env = environ.Env(
    DEBUG=(bool, True),
    SECRET_KEY=(
        str,
        "django-insecure-*!jx)y2+=f03h^3z)g7%2u617o1ssj(p426fg+!$wf6l4972p_",
    ),
)
# Load .env file if it exists
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

# Production environment detection - needed early in settings
is_production = (
    'RENDER' in os.environ or 
    'RENDER_SERVICE_NAME' in os.environ or
    os.environ.get('DEBUG', '').lower() == 'false' or
    os.environ.get('RENDER_EXTERNAL_HOSTNAME') is not None
)

ALLOWED_HOSTS = [
    h.strip() for h in env("ALLOWED_HOSTS", default="127.0.0.1,localhost,.onrender.com").split(",")
]

# Render deployment settings
if 'RENDER' in os.environ:
    DEBUG = False
    ALLOWED_HOSTS.append('.onrender.com')
    # Add Render external hostname if available
    if 'RENDER_EXTERNAL_HOSTNAME' in os.environ:
        ALLOWED_HOSTS.append(os.environ['RENDER_EXTERNAL_HOSTNAME'])
SITE_URL = env("SITE_URL", default="http://127.0.0.1:8000")


# Application definition

INSTALLED_APPS = [
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "profiles",
    "notifications",
    "projects",
    "chat",
    "transport",
    "wallets",
    "rest_framework",
    "crispy_forms",
    "crispy_bootstrap4",
    "crispy_tailwind",
    "channels",
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "core.middleware.FixMediaUrlsMiddleware",  # Fix malformed Railway media URLs
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "lusitohub.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "templates/admin"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "notifications.context_processors.notifications",
            ],
        },
    },
]

WSGI_APPLICATION = "lusitohub.wsgi.application"
ASGI_APPLICATION = "lusitohub.asgi.application"
SESSION_ENGINE = "django.contrib.sessions.backends.db"


# Temporarily using in-memory channel layer instead of Redis
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

# Original Redis Channel Layer config (commented out)
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("127.0.0.1", 6379)],
#         },
#     },
# }

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Database configuration for Render PostgreSQL
if 'DATABASE_URL' in os.environ:
    # Render PostgreSQL configuration
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }
else:
    # Local development database
    DATABASES = {"default": env.db(default=f"sqlite:///{BASE_DIR/'db.sqlite3'}")}

GOOGLE_MAPS_SERVER_API_KEY = {"API_KEY": config("Server-Side_API_KEY", default="")}
GOOGLE_MAPS_CLIENT_API_KEY = {
    "API_KEY": config("Client_API_KEY", default=""),
}

MTN_MOMO_CONFIG = {
    "BASE_URL": env("MOMO_BASE_URL", default="https://sandbox.momodeveloper.mtn.com"),
    "SUBSCRIPTION_KEY": env("MOMO_SUBSCRIPTION_KEY", default=""),
    "API_USER_ID": env("MOMO_API_USER_ID", default=""),
    "API_KEY": env("MOMO_API_KEY", default=""),
    "CALLBACK_URL": env(
        "MOMO_CALLBACK_URL", default="https://yourdomain.com/momo/callback/"
    ),
    "PROVIDER_CALLBACK_HOST": env(
        "MOMO_PROVIDER_CALLBACK_HOST", default="https://yourdomain.com"
    ),
    "ENVIRONMENT": env("MOMO_ENVIRONMENT", default="sandbox"),  # 'sandbox' or 'live'
    "CURRENCY": env("MOMO_CURRENCY", default="SZL"),
}

MOMO_SETTINGS = {
    "API_KEY": env("MOMO_API_KEY", default=""),
    "USER_ID": env("MOMO_API_USER_ID", default=""),
    "SUBSCRIPTION_KEY": env("MOMO_SUBSCRIPTION_KEY", default=""),
    "ENVIRONMENT": env("MOMO_ENVIRONMENT", default="sandbox"),  # or 'production'
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Cache configuration - Railway compatible
if 'REDIS_URL' in os.environ:
    # Use Redis if available on Railway
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": os.environ.get('REDIS_URL'),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "IGNORE_EXCEPTIONS": True,
            },
        }
    }
else:
    # Use local memory cache as fallback
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
        }
    }

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "debug.log",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "": {
            "handlers": ["file", "console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

X_FRAME_OPTIONS = "SAMEORIGIN"
SILENCED_SYSTEM_CHECKS = ["security.W019"]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Static file finders - help Django find static files
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Media files configuration
MEDIA_URL = env("MEDIA_URL", default="/media/")
MEDIA_ROOT = BASE_DIR / "media"

# Whitenoise configuration for Railway static files
if is_production:
    # Use WhiteNoise for static files in production
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
CRISPY_TEMPLATE_PACK = "bootstrap4"
LOGIN_REDIRECT_URL = "home"
LOGIN_URL = "login"

# Email Configuration - PRIORITIZE GMAIL SMTP
import logging
email_logger = logging.getLogger('email_backend')

# Gmail SMTP Configuration (Primary)
EMAIL_HOST = env("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
EMAIL_USE_SSL = env.bool("EMAIL_USE_SSL", default=False)
EMAIL_TIMEOUT = env.int("EMAIL_TIMEOUT", default=30)  # Increased timeout for Gmail
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default=EMAIL_HOST_USER or "noreply@lusitohub.com")

# Resend API (Fallback only)
RESEND_API_KEY = env("RESEND_API_KEY", default="")

# Email backend configuration - GMAIL SMTP FIRST
if is_production:
    # Render/Production environment - PRIORITIZE Gmail SMTP
    email_logger.info(f"🚀 Production environment detected: Render={('RENDER' in os.environ)}")
    
    # Option 1: Gmail SMTP (Primary choice)
    if EMAIL_HOST_USER and EMAIL_HOST_PASSWORD:
        EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
        email_logger.info(f"📧 Production Gmail SMTP configured: {EMAIL_HOST_USER}")
        email_logger.info(f"📧 Gmail SMTP Settings:")
        email_logger.info(f"   HOST: {EMAIL_HOST}:{EMAIL_PORT}")
        email_logger.info(f"   TLS: {EMAIL_USE_TLS}")
        email_logger.info(f"   FROM: {DEFAULT_FROM_EMAIL}")
        print(f"✅ Gmail SMTP configured for {EMAIL_HOST_USER}")
        print(f"📧 OTP emails will be sent via Gmail")
    
    # Option 2: Resend API (Fallback)
    elif RESEND_API_KEY:
        try:
            import requests
            EMAIL_BACKEND = "profiles.email_backends.ResendEmailBackend"
            email_logger.info(f"📧 Fallback: Using Resend API")
            print(f"📧 Fallback: Using Resend API")
        except ImportError:
            email_logger.error("⚠️ Resend API key provided but 'requests' library not available")
            EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    
    # Option 3: No email service configured (Error)
    else:
        email_logger.error("😨 CRITICAL ERROR: No email service configured!")
        print("😨 CRITICAL ERROR: No email service configured!")
        print("Users will NOT receive OTP codes - registration will fail!")
        print("")
        print("📧 Required Gmail SMTP variables for Render:")
        print("- EMAIL_HOST_USER=udohpeterbrown@gmail.com")
        print("- EMAIL_HOST_PASSWORD=fdac hcuq libc ctsb")
        print("- DEFAULT_FROM_EMAIL=udohpeterbrown@gmail.com")
        print(f"🔍 Environment check: RENDER={('RENDER' in os.environ)}")
        # Use console as fallback to prevent total failure
        EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    # Local development environment
    if EMAIL_HOST_USER and EMAIL_HOST_PASSWORD:
        EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
        email_logger.info(f"📧 Development Gmail SMTP configured: {EMAIL_HOST_USER}")
        print(f"📧 Development Gmail SMTP configured - real emails will be sent to {EMAIL_HOST_USER}")
    else:
        EMAIL_BACKEND = env("EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend")
        email_logger.info("💻 Local development - using console email backend")
        print("💻 Local development - using console email backend")

# Jazzmin Admin Dashboard Configuration
JAZZMIN_SETTINGS = {
    # Title on the login screen (19 chars max)
    "site_title": "LusitoHub Admin",
    
    # Title on the brand (19 chars max)
    "site_header": "LusitoHub",
    
    # Title on the browser tab
    "site_brand": "LusitoHub Administration",
    
    # Logo to use for your site
    "site_logo": "images/lusito_logo.svg",
    
    # Logo to use for login form in dark themes
    "login_logo": None,
    
    # Logo to use for your site, must be present in static files
    "site_logo_classes": "img-circle",
    
    # Relative path to a favicon
    "site_icon": None,
    
    # Welcome text on the login screen
    "welcome_sign": "Welcome to LusitoHub Admin",
    
    # Copyright on the footer
    "copyright": "LusitoHub Ltd",
    
    # List of model admins to search from the search bar
    "search_model": ["auth.User", "auth.Group"],
    
    # Field name on user model that contains avatar (fixed for proper callable)
    "user_avatar": None,  # Disable user avatars in admin to prevent errors
    
    ############
    # Top Menu #
    ############
    
    # Links to put along the top menu
    "topmenu_links": [
        # Url that gets reversed (Permissions can be added)
        {"name": "Admin Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        
        # Link to main application
        {"name": "🚛 Transport Dashboard", "url": "/", "new_window": True},
        
        # App with dropdown menu to all its models pages (Permissions checked against models)
        {"app": "profiles"},
        {"app": "transport"},
        {"app": "wallets"},
        
        # Model admin quick links
        {"name": "Users", "model": "auth.User"},
    ],
    
    #############
    # User Menu #
    #############
    
    # Additional links to include in the user menu on the top right
    "usermenu_links": [
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},
        {"model": "auth.user"},
    ],
    
    #############
    # Side Menu #
    #############
    
    # Whether to display the side menu
    "show_sidebar": True,
    
    # Whether to auto expand the menu
    "navigation_expanded": True,
    
    # Hide these apps when generating side menu
    "hide_apps": [],
    
    # Hide these models when generating side menu (e.g auth.user)
    "hide_models": [],
    
    # List of apps (and models) to base side menu ordering off of
    "order_with_respect_to": [
        "auth",
        "profiles", 
        "transport",
        "wallets",
        "projects",
        "notifications",
        "chat"
    ],
    
    # Custom links to append to app groups, keyed on app name
    "custom_links": {
        "profiles": [
            {
                "name": "Verify Documents", 
                "url": "/admin/profiles/documentreview/", 
                "icon": "fas fa-check-circle",
                "permissions": ["profiles.view_documentreview"]
            },
            {
                "name": "Transport Owner Tags", 
                "url": "/admin/profiles/profile/?transport_owner_tag__exact=1", 
                "icon": "fas fa-truck",
                "permissions": ["profiles.view_profile"]
            }
        ]
    },
    
    # Custom icons for side menu apps/models
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "profiles": "fas fa-user-circle",
        "profiles.Profile": "fas fa-id-card",
        "profiles.VehicleOwnership": "fas fa-car",
        "profiles.OperatorAssignment": "fas fa-user-plus",
        "profiles.Document": "fas fa-file-alt",
        "profiles.DocumentReview": "fas fa-clipboard-check",
        "profiles.IdentityVerification": "fas fa-id-badge",
        "transport": "fas fa-shipping-fast",
        "transport.TransportRequest": "fas fa-route",
        "transport.Bid": "fas fa-gavel",
        "wallets": "fas fa-wallet",
        "wallets.Wallet": "fas fa-credit-card",
        "wallets.Transaction": "fas fa-exchange-alt",
        "projects": "fas fa-briefcase",
        "notifications": "fas fa-bell",
        "chat": "fas fa-comments",
    },
    
    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    
    #################
    # Related Modal #
    #################
    "related_modal_active": False,
    
    #############
    # UI Tweaks #
    #############
    
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    "custom_css": "css/admin_custom.css",
    "custom_js": "js/admin_custom.js",
    
    # Whether to link font from fonts.googleapis.com (use custom_css to supply font otherwise)
    "use_google_fonts_cdn": True,
    
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": True,
    
    ###############
    # Change view #
    ###############
    
    # Render out the change view as a single form, or in tabs
    "changeform_format": "horizontal_tabs",
    
    # Override change forms on a per modeladmin basis
    "changeform_format_overrides": {
        "auth.user": "collapsible", 
        "auth.group": "vertical_tabs",
        "profiles.profile": "horizontal_tabs",
        "profiles.vehicleownership": "horizontal_tabs",
    },
}

# Jazzmin UI Tweaks
JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-primary",
    "accent": "accent-primary",
    "navbar": "navbar-primary navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": False,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "default",
    "dark_mode_theme": None,
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    },
    "actions_sticky_top": False
}

# Production Security Settings for Railway
if not DEBUG:
    # Security Headers
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # SSL/HTTPS Settings (Railway provides SSL automatically)
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # CSRF Configuration for Railway
    CSRF_TRUSTED_ORIGINS = [
        'https://*.railway.app',
        'https://*.up.railway.app',
        'https://web-production-53602.up.railway.app',  # Your specific Railway domain
    ]
    
    # CSRF Cookie settings for Railway
    CSRF_COOKIE_DOMAIN = None  # Let Django auto-detect
    CSRF_COOKIE_PATH = '/'
    CSRF_COOKIE_SAMESITE = 'Lax'  # More permissive than 'Strict'
    CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access if needed
    CSRF_USE_SESSIONS = False  # Use cookies instead of sessions
    
    print(f"🔒 Production CSRF configured for Railway")
    print(f"   Trusted origins: {CSRF_TRUSTED_ORIGINS}")
    
    # Additional security settings
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
else:
    # Development CSRF settings
    CSRF_COOKIE_SECURE = False  # Allow HTTP in development
    SESSION_COOKIE_SECURE = False
    CSRF_TRUSTED_ORIGINS = [
        'http://127.0.0.1:8000',
        'http://localhost:8000',
    ]
    print(f"🔓 Development CSRF configured")
    print(f"   Trusted origins: {CSRF_TRUSTED_ORIGINS}")

# Railway specific environment variables
RAILWAY_STATIC_URL = env('RAILWAY_STATIC_URL', default=STATIC_URL)
RAILWAY_MEDIA_URL = env('RAILWAY_MEDIA_URL', default=MEDIA_URL)

# Media file serving configuration for Railway
if 'RAILWAY_ENVIRONMENT' in os.environ:
    # In Railway production, keep media URLs simple and relative
    # DO NOT use Railway-provided URLs as they cause domain path issues
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'
    
    # Add media URL patterns to urlconf for Railway
    from django.conf import settings
    from django.conf.urls.static import static
    
    print(f"🚀 Railway production media config:")
    print(f"   STATIC_URL: {STATIC_URL}")
    print(f"   MEDIA_URL: {MEDIA_URL}")
    print(f"   STATIC_ROOT: {STATIC_ROOT}")
    print(f"   MEDIA_ROOT: {MEDIA_ROOT}")
